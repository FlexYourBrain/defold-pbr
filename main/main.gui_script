local C = require 'main/constants'
local dirtylarry = require "dirtylarry/dirtylarry"

local function sort_table_by_value(tbl)
	local sorted = {}
	for k, v in pairs(tbl) do
		sorted[v+1] = {
			name  = k,
			value = v,
		}
	end
	return sorted
end

function init(self)
	msg.post(".", "acquire_input_focus")
	-- radio
	local radio_radio = gui.get_node("template/larryradio")
	local radio_label = gui.get_node("template/larrylabel")

	self.debug_mode_wid = {}
	self.debug_mode     = "NONE"

	for k,v in ipairs(sort_table_by_value(C.DEBUG_MODE)) do
		local debug_wid = {
			name  = v.name,
			value = v.value,
			radio = gui.clone(radio_radio),
			label = gui.clone(radio_label),
		}
		
		gui.set_id(debug_wid.radio, v.name .. "/larryradio")
		gui.set_id(debug_wid.label, v.name .. "/larrylabel")
		self.debug_mode_wid[k] = debug_wid
	end

	self.env_selection_wid = {}
	self.env_selection = C.ENVIRONMENTS[1].name
	
	for k,v in pairs(C.ENVIRONMENTS) do
		self.env_selection_wid[v.name] = {
			radio = gui.clone(radio_radio),
			label = gui.clone(radio_label),
		}
		gui.set_id(self.env_selection_wid[v.name].radio, v.name .. "/larryradio")
		gui.set_id(self.env_selection_wid[v.name].label, v.name .. "/larrylabel")
	end

	self.is_locked        = false
	self.light_0_intensity = 1
	self.light_1_intensity = 1
	self.camera_exposure   = 1
end

function update_debug_wids(self)
	local height     = 24
	local start_y    = gui.get_height() - height
	local start_x    = height
	local text_scale = 0.3

	for k,v in ipairs(self.debug_mode_wid) do
		local n = k -1
		gui.set_position(v.radio, vmath.vector3(start_x, start_y - height * n, 0))
		gui.set_position(v.label, vmath.vector3(start_x + 24, start_y - height * n, 0))
		gui.set_scale(v.radio, vmath.vector3(text_scale, text_scale, 1))
		gui.set_scale(v.label, vmath.vector3(text_scale, text_scale, 1))
		gui.set_text(v.label, v.name)

		pprint(k, v.name)
	end
end

function update_env_selection(self)
	local height = 24
	local right_margin = 192
	local start_y = gui.get_height() - height
	local start_x = gui.get_width() - right_margin
	local i = 0
	local text_scale = 0.3

	for k,v in pairs(self.env_selection_wid) do
		gui.set_position(v.radio, vmath.vector3(start_x, start_y - height * i, 0))
		gui.set_position(v.label, vmath.vector3(start_x + 24, start_y - height * i, 0))
		gui.set_scale(v.radio, vmath.vector3(text_scale, text_scale, 1))
		gui.set_scale(v.label, vmath.vector3(text_scale, text_scale, 1))
		gui.set_text(v.label, k)
		i = i + 1
	end
end

function update(self, dt)
	update_debug_wids(self)
	update_env_selection(self)
end

function on_input(self, action_id, action)
	local debug_mode = self.debug_mode
	for k,v in pairs(self.debug_mode_wid) do
		self.debug_mode = dirtylarry:radio(v.name, action_id, action, v.name, self.debug_mode)
	end

	if debug_mode ~= self.debug_mode then
		msg.post("@render:", "debug_mode", { self.debug_mode })
	end

	local env = self.env_selection
	for k,v in pairs(self.env_selection_wid) do
		self.env_selection = dirtylarry:radio(k, action_id, action, k, self.env_selection)
	end

	if env ~= self.env_selection then
		local env_k = -1
		for k,v in pairs(C.ENVIRONMENTS) do
			if self.env_selection == v.name then
				env_k = k
			end
		end
		
		msg.post("/main#main", "set_env", { env_k })
	end

	--------------------------
	-- Update camera exposure
	--------------------------
	local camera_exposure = self.camera_exposure
	self.camera_exposure = dirtylarry:slider("camera_exposure", action_id, action, 0.01, 8, self.camera_exposure)

	if camera_exposure ~= self.camera_exposure then
		msg.post("/main#main", "set_exposure", { camera_exposure })
	end

	if dirtylarry:hit("camera_exposure/larrysafearea", action_id, action, function() end) then
		self.is_locked = true
	end

	-----------------------
	-- Update light sliders
	-----------------------
	local light_0_intensity = self.light_0_intensity
	self.light_0_intensity = dirtylarry:slider("light_0", action_id, action, 0, 20, self.light_0_intensity)

	if light_0_intensity ~= self.light_0_intensity then
		msg.post("@render:", "set_light_params", { index = 1, intensity = self.light_0_intensity })
	end

	if dirtylarry:hit("light_0/larrysafearea", action_id, action, function() end) then
		self.is_locked = true
	end

	local light_1_intensity = self.light_1_intensity
	self.light_1_intensity = dirtylarry:slider("light_1", action_id, action, 0, 20, self.light_1_intensity)

	if light_1_intensity ~= self.light_1_intensity then
		msg.post("@render:", "set_light_params", { index = 2, intensity = self.light_1_intensity })
	end

	if dirtylarry:hit("light_1/larrysafearea", action_id, action, function() end) then
		self.is_locked = true
	end

	if action.released then
		self.is_locked = false
	end

	return self.is_locked
end
